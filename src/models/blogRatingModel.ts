import { PrismaClient, BlogRating } from '@prisma/client';
const prisma = new PrismaClient();

export class BlogRatingModel {
  // Create a new blog rating
  static async createRating(blogId: number, userId: number, rating: number): Promise<BlogRating> {
    return prisma.blogRating.create({
      data: {
        blogId,
        userId,
        rating,
      },
    });
  }

  // Update an existing blog rating
  static async updateRating(blogId: number, userId: number, rating: number): Promise<BlogRating> {
    return prisma.blogRating.update({
      where: {
        userId_blogId: { userId, blogId }, // Correct field name generated by Prisma
      },
      data: {
        rating,
      },
    });
  }

  // Find a rating for a specific blog and user
  static async getRatingByBlogAndUser(blogId: number, userId: number): Promise<BlogRating | null> {
    return prisma.blogRating.findUnique({
      where: {
        userId_blogId: { userId, blogId }, // Correct field name generated by Prisma
      },
    });
  }

  // Get average rating for a specific blog
  static async getAverageRating(blogId: number): Promise<number> {
    const ratings = await prisma.blogRating.findMany({
      where: { blogId },
      select: { rating: true },
    });

    if (ratings.length === 0) return 0; // No ratings for the blog

    const totalRating = ratings.reduce((sum, { rating }) => sum + rating, 0);
    return totalRating / ratings.length; // Return the average rating
  }

  // Get all ratings for a specific blog
  static async getRatingsByBlog(blogId: number): Promise<BlogRating[]> {
    return prisma.blogRating.findMany({
      where: { blogId },
    });
  }
}
